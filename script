// Enter Spreadsheet ID here
var SS = SpreadsheetApp.openById('1lDFbqg_yodMeab-RpuDVevaxUMKKZUDUgnA6iQMx6yw');
var timezone = "Asia/Manila";
var str = "";

function doPost(e) {
  var parsedData;
  var result = {};

  try { 
    parsedData = JSON.parse(e.postData.contents);
  } catch (f) {
    return ContentService.createTextOutput("Error in parsing request body: " + f.message);
  }

  // Log parsed data to check if it's being received correctly
  Logger.log("Parsed Data: " + JSON.stringify(parsedData));

  if (parsedData !== undefined) {
    var sheet = SS.getSheetByName(parsedData.sheet_name);
    if (!sheet) {
      return ContentService.createTextOutput("Error: Sheet '" + parsedData.sheet_name + "' not found.");
    }

    // Enhanced sanitization to remove non-printable/control characters
    var sanitizedValues = parsedData.values.replace(/[^\x20-\x7E]/g, '').trim();
    // Log sanitized values for debugging
    Logger.log("Sanitized Values: " + sanitizedValues);

    if (sanitizedValues.length === 0) {
      return ContentService.createTextOutput("Error: No valid data found.");
    }

    var dataArr = sanitizedValues.split(",");
    // Log the split array to verify correct data structure
    Logger.log("Data Array: " + dataArr);

    // Check if all necessary fields are present
    if (dataArr.length !== 6) {
      return ContentService.createTextOutput("Error: Incorrect data format.");
    }

    var Curr_Date = Utilities.formatDate(new Date(), timezone, "MM/dd/yyyy");
    var Curr_Time = Utilities.formatDate(new Date(), timezone, "hh:mm:ss a");

    // Data from Arduino code
    var value0 = dataArr[0];  // Student ID
    var value1 = dataArr[1];  // First Name
    var value2 = dataArr[2];  // Last Name
    var value3 = dataArr[3];  // Phone Number
    var value4 = dataArr[4];  // Address
    var value5 = dataArr[5];  // Gate Number

    // STEP 1: Check if Student ID already exists for Time-Out
    var data = sheet.getDataRange().getValues();
    var row_number = 0;
    var time_out = "";

    for (var i = 0; i < data.length; i++) {
      if (data[i][0] == value0) {  // Match Student ID
        row_number = i + 1;
        time_out = data[i][2];  // Time-Out in Column C
        break;
      }
    }

    // STEP 2: Update Time-Out if not already set
    if (row_number > 0 && time_out === "") {
      sheet.getRange("C" + row_number).setValue(Curr_Time);
      return ContentService.createTextOutput("Success: Time-Out recorded.");
    } else if (time_out !== "") {
      return ContentService.createTextOutput("Error: Time-Out already recorded.");
    }

    // Prevent duplicate entries
    var isDuplicate = false;
    for (var i = 0; i < data.length; i++) {
      if (data[i][0] == value0) {
        isDuplicate = true;
        break;
      }
    }

    if (isDuplicate) {
      return ContentService.createTextOutput("Error: Student ID already exists.");
    }

    // STEP 3: Insert or Append Row
    switch (parsedData.command) {
      case "insert_row":
        sheet.insertRows(2);  // Insert row below header
        sheet.getRange('A2').setValue(value0);     // Student ID
        sheet.getRange('B2').setValue(Curr_Time);  // Time-In
        sheet.getRange('D2').setValue(value5);     // Gate Number
        sheet.getRange('E2').setValue(Curr_Date);  // Date
        sheet.getRange('F2').setValue(value1);     // First Name
        sheet.getRange('G2').setValue(value2);     // Last Name
        sheet.getRange('H2').setValue(value3);     // Phone Number
        sheet.getRange('I2').setValue(value4);     // Address
        SpreadsheetApp.flush();
        str = "Success: New record inserted.";
        break;

      case "append_row":
        var publish_array = [value0, Curr_Time, '', value5, Curr_Date, value1, value2, value3, value4];
        sheet.appendRow(publish_array);
        SpreadsheetApp.flush();
        str = "Success: Row appended.";
        break;

      default:
        str = "Error: Unknown command '" + parsedData.command + "'.";  // Log if command is invalid
    }

    // Return the result
    return ContentService.createTextOutput(str);

  } else {
    return ContentService.createTextOutput("Error! Request body empty or in incorrect format.");
  }
}


