#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecureBearSSL.h>
#include <LiquidCrystal_I2C.h>

//-----------------------------------------
#define RST_PIN  D3
#define SS_PIN   D4
#define BUZZER   D2
//-----------------------------------------
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status;      
//-----------------------------------------
int blockNum = 2;
byte bufferLen = 64;
byte readBlockData[64];
//-----------------------------------------
String card_holder_name;
const String sheet_url = "https://script.google.com/macros/s/AKfycbzE8ZK6wDk9QS1w1dB__7EqbFM8kAto-IfE2h46Bn30jtXIZx9clzIdC9ztOhgmR6ba/exec";
const uint8_t fingerprint[32] = {0xf2, 0x28, 0x7b, 0x3a, 0x1b, 0x41, 0xcf, 0x6f, 0x01, 0x73, 0xac, 0x05, 0x7f, 0xc0, 0x2a, 0x9b,
                                 0xfe, 0x4d, 0x0f, 0x09, 0x10, 0x96, 0x29, 0xd3, 0x73, 0x91, 0xd2, 0x57, 0xf5, 0xa4, 0xbe, 0x47};

#define WIFI_SSID "Manangcayal123"
#define WIFI_PASSWORD "dacueno7"

// Initialize the LCD display
LiquidCrystal_I2C lcd(0x3F, 16, 2);  

// Function prototype
void ReadDataFromBlock(int blockNum, byte readBlockData[]);

void setup() {
  Serial.begin(115200); // Ensure baud rate matches your monitor
  Serial.println();
  
  // WiFi Connectivity
  Serial.print("Connecting to AP");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(200);
  }
  Serial.println("\nWiFi connected. IP address: " + WiFi.localIP().toString());

  // Initialize the LCD
  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");
  delay(2000);

  // Initialize the buzzer and SPI
  pinMode(BUZZER, OUTPUT);
  SPI.begin();
  mfrc522.PCD_Init();  // Initialize the RFID reader
}

void loop() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan your Card");

  if (!mfrc522.PICC_IsNewCardPresent()) { return; }
  if (!mfrc522.PICC_ReadCardSerial()) { return; }

  Serial.println("\nReading last data from RFID...");
  ReadDataFromBlock(blockNum, readBlockData);

  Serial.print("Last data in RFID: ");
  for (int j = 0; j < 16; j++) {
    Serial.write(readBlockData[j]);
  }
  Serial.println();

  bool buzzerState = false;  // A flag to check if the buzzer has already buzzed

  if (!mfrc522.PICC_IsNewCardPresent()) {
    buzzerState = false; // Reset buzzer state if no card is present
    return;
  }

  if (!mfrc522.PICC_ReadCardSerial()) {
    buzzerState = false; // Reset buzzer state if no card is read
    return;
  }
  

  if (!buzzerState) {
    // Buzzer feedback only once
    digitalWrite(BUZZER, HIGH);
    delay(200);
    digitalWrite(BUZZER, LOW);
    delay(200);
    buzzerState = true;  // Set the flag to true so it won't buzz again
  }

  if (WiFi.status() == WL_CONNECTED) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    client->setFingerprint(fingerprint);

    card_holder_name = sheet_url + "?name=" + String((char*)readBlockData);
    card_holder_name.trim();
    Serial.println("Card holder name URL: " + card_holder_name);

    HTTPClient https;
    if (https.begin(*client, card_holder_name)) {
      int httpCode = https.GET();
      if (httpCode > 0) {
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
      } else {
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }
      https.end();
      delay(1000);
    } else {
      Serial.println("[HTTPS] Unable to connect");
    }
  }
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  Serial.println("Block was read successfully");
  Serial.print("Read data from block: ");
  for (int j = 0; j < bufferLen; j++) {
    Serial.write(readBlockData[j]);
  }
  Serial.println();

  // Optionally dump the card's memory layout to the serial monitor for debugging
  mfrc522.PICC_DumpToSerial(&(mfrc522.uid)); 
}
