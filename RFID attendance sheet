#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>
#include <LiquidCrystal_I2C.h>

//-----------------------------------------
#define RST_PIN  D3
#define SS_PIN   D4
#define BUZZER   D0
//-----------------------------------------
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status;      
//-----------------------------------------
int blockNum = 2;
byte bufferLen = 64;
byte readBlockData[64];
uint8_t* buffer = (uint8_t*)malloc(6200);

//-----------------------------------------
String card_holder_name;
const String sheet_url = "https://script.google.com/macros/s/AKfycbxghr01s0Tk_DdzUTuMuh0ar5uhs4iAkCqMDbiTZOirWV6s6IEeJFtHd1VSLdPWJmkg/exec";

// SSL Fingerprint (Update this if necessary)
/*const uint8_t fingerprint[32] = {
  0x1d, 0x1e, 0x92, 0x16, 0x76, 0x74, 0x3b, 0xfb, 
  0xea, 0x13, 0xce, 0x26, 0x23, 0xb3, 0x25, 0xce,
  0x5e, 0xfc, 0x0d, 0xb2, 0x15, 0x28, 0x28, 0xab,
  0x9e, 0x28, 0x8e, 0x02, 0xe2, 0x31, 0x12, 0x52
};*/
const uint8_t fingerprint[32] = { 
  0x95, 0x6a, 0xbf, 0xe9, 0x3a, 0xb7, 0xab, 0x83, 
  0x26, 0xfb, 0xca, 0x16, 0x97, 0x99, 0xeb, 0xc9,
  0x1a, 0x5b, 0x39, 0x9b, 0xf4, 0x28, 0x1a, 0x2f,
  0xfa, 0x86, 0x0f, 0x5a, 0x45, 0x03, 0x38, 0x1f 
};
// WiFi Credentials
#define WIFI_SSID "Manangcayal123"
#define WIFI_PASSWORD "dacueno7"

// Initialize the LCD display
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Try 0x27 if 0x3F doesnâ€™t work

// Function prototype
void ReadDataFromBlock(int blockNum, byte readBlockData[]);

void setup() {
  Serial.begin(115200); // Ensure baud rate matches your monitor
  Serial.println();
  
  // WiFi Connectivity
  Serial.print("Connecting to AP");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nWiFi connected. IP address: " + WiFi.localIP().toString());

  // Initialize the LCD
  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");
  delay(2000);

  // Initialize the buzzer and SPI
  pinMode(BUZZER, OUTPUT);
  SPI.begin();
  mfrc522.PCD_Init();  // Initialize the RFID reader
}

void loop() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Scan your Card");

  if (!mfrc522.PICC_IsNewCardPresent()) { return; }
  if (!mfrc522.PICC_ReadCardSerial()) { return; }

  Serial.println("\nReading last data from RFID...");
  ReadDataFromBlock(blockNum, readBlockData);

  Serial.print("Last data in RFID: ");
  for (int j = 0; j < 16; j++) {
    Serial.write(readBlockData[j]);
  }
  Serial.println();

  // Play buzzer sound


  // Convert RFID data to a readable hex string
  String rfidDataHex = "";
  for (int i = 0; i < 16; i++) {
    if (readBlockData[i] < 0x10) {
      rfidDataHex += "0";  // Add leading zero for consistency
    }
    rfidDataHex += String(readBlockData[i], HEX);
  }
  rfidDataHex.toUpperCase();  // Convert to uppercase for readability

  card_holder_name = sheet_url + "?name=" + rfidDataHex;
  Serial.println("Card holder name URL: " + card_holder_name);

  // Ensure WiFi is still connected before making HTTPS requests
  if (WiFi.status() == WL_CONNECTED) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    
    // Use setInsecure() if fingerprint verification fails
    client->setInsecure();  // Remove this if using fingerprint

    // Use fingerprint verification for security
    // client->setFingerprint(fingerprint);  // Uncomment this for fingerprint verification

    HTTPClient https;
    if (https.begin(*client, card_holder_name)) {
      int httpCode = https.GET();
      if (httpCode > 0) {
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
        String payload = https.getString();
        Serial.println("Response: " + payload);
      } else {
        Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }
      https.end();
    } else {
      Serial.println("[HTTPS] Unable to connect");
    }
  } else {
    Serial.println("[WiFi] Connection lost. Reconnecting...");
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  }

  delay(2000); // Small delay before scanning again
}

void ReadDataFromBlock(int blockNum, byte readBlockData[]) {
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }
  
  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Authentication failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
  Serial.println("Block was read successfully");
  Serial.print("Read data from block: ");
  for (int j = 0; j < bufferLen; j++) {
    Serial.write(readBlockData[j]);
  }
  Serial.println();

  // Optionally dump the card's memory layout to the serial monitor for debugging
  mfrc522.PICC_DumpToSerial(&(mfrc522.uid)); 
}

